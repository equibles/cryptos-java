/*
 * Cryptos
 * <h3>Authentication</h3>                     You need to authenticate to use this API.                     To authenticate click on the \"Authorize\" button and do one of the following steps.<br />                     1. Send your API key in the headers of the request by typing \"Bearer my-key\" on the Bearer authorization scheme.<br />                     2. Send your API key on the \"ApiKey\" query string parameter. To do this type your API key in the Query String authorization scheme.<br />                     Both methods are equally valid. We offer both options so that you can use the method that is easier to use in your application.<br />                     <br />                     <h3>API limits</h3>                     Your API key may be subject to daily/hourly limits. To know how much requests you have left look at the following headers in the response.<br />                     1. <strong>x-ratelimit-limit</strong> - The total number of requests that you are allowed to make in a given period (hour/day)                       2. <strong>x-ratelimit-remaining</strong> - The number of remaining requests that you can perform in the current period.<br />                     3. <strong>x-ratelimit-reset</strong> - The number of seconds until the current period resets.<br />                     <br />                     <h3>Suggestions</h3>                     You don't need to implement the whole API by hand in your programming language of choice.<br />                     Since this API has an OpenAPI specification you can use                      <a href=\"https://github.com/swagger-api/swagger-codegen\" target=\"_blank\">Swagger Generator</a>                      to automatically generate client stubs for more than 30 programming languages.                     <br />                     <br />                     You don't have an API key? <a href=\"https://www.equibles.com/api/pricing\" target=\"_blank\">Get one for free here.</a>
 *
 * OpenAPI spec version: v1
 * Contact: equibles@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.equibles.cryptos.models;

import java.util.Objects;
import java.util.Arrays;
import com.equibles.cryptos.models.AssetType;
import com.equibles.cryptos.models.Exchange;
import com.equibles.cryptos.models.Image;
import com.equibles.cryptos.models.Price;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * CryptoCurrencyProfile
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-02T22:25:24.150Z[Europe/Lisbon]")
public class CryptoCurrencyProfile {
  @SerializedName("logo")
  private Image logo = null;

  @SerializedName("marketCap")
  private Long marketCap = null;

  @SerializedName("circulatingSupply")
  private Long circulatingSupply = null;

  @SerializedName("maxSupply")
  private Long maxSupply = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("website")
  private String website = null;

  @SerializedName("ticker")
  private String ticker = null;

  @SerializedName("fullTicker")
  private String fullTicker = null;

  @SerializedName("assetType")
  private AssetType assetType = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("exchange")
  private Exchange exchange = null;

  @SerializedName("lastPrice")
  private Price lastPrice = null;

  public CryptoCurrencyProfile logo(Image logo) {
    this.logo = logo;
    return this;
  }

   /**
   * Get logo
   * @return logo
  **/
  @Schema(description = "")
  public Image getLogo() {
    return logo;
  }

  public void setLogo(Image logo) {
    this.logo = logo;
  }

  public CryptoCurrencyProfile marketCap(Long marketCap) {
    this.marketCap = marketCap;
    return this;
  }

   /**
   * Get marketCap
   * @return marketCap
  **/
  @Schema(description = "")
  public Long getMarketCap() {
    return marketCap;
  }

  public void setMarketCap(Long marketCap) {
    this.marketCap = marketCap;
  }

  public CryptoCurrencyProfile circulatingSupply(Long circulatingSupply) {
    this.circulatingSupply = circulatingSupply;
    return this;
  }

   /**
   * Get circulatingSupply
   * @return circulatingSupply
  **/
  @Schema(description = "")
  public Long getCirculatingSupply() {
    return circulatingSupply;
  }

  public void setCirculatingSupply(Long circulatingSupply) {
    this.circulatingSupply = circulatingSupply;
  }

  public CryptoCurrencyProfile maxSupply(Long maxSupply) {
    this.maxSupply = maxSupply;
    return this;
  }

   /**
   * Get maxSupply
   * @return maxSupply
  **/
  @Schema(description = "")
  public Long getMaxSupply() {
    return maxSupply;
  }

  public void setMaxSupply(Long maxSupply) {
    this.maxSupply = maxSupply;
  }

  public CryptoCurrencyProfile description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public CryptoCurrencyProfile website(String website) {
    this.website = website;
    return this;
  }

   /**
   * Get website
   * @return website
  **/
  @Schema(description = "")
  public String getWebsite() {
    return website;
  }

  public void setWebsite(String website) {
    this.website = website;
  }

  public CryptoCurrencyProfile ticker(String ticker) {
    this.ticker = ticker;
    return this;
  }

   /**
   * Get ticker
   * @return ticker
  **/
  @Schema(description = "")
  public String getTicker() {
    return ticker;
  }

  public void setTicker(String ticker) {
    this.ticker = ticker;
  }

  public CryptoCurrencyProfile fullTicker(String fullTicker) {
    this.fullTicker = fullTicker;
    return this;
  }

   /**
   * Get fullTicker
   * @return fullTicker
  **/
  @Schema(description = "")
  public String getFullTicker() {
    return fullTicker;
  }

  public void setFullTicker(String fullTicker) {
    this.fullTicker = fullTicker;
  }

  public CryptoCurrencyProfile assetType(AssetType assetType) {
    this.assetType = assetType;
    return this;
  }

   /**
   * Get assetType
   * @return assetType
  **/
  @Schema(description = "")
  public AssetType getAssetType() {
    return assetType;
  }

  public void setAssetType(AssetType assetType) {
    this.assetType = assetType;
  }

  public CryptoCurrencyProfile name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public CryptoCurrencyProfile exchange(Exchange exchange) {
    this.exchange = exchange;
    return this;
  }

   /**
   * Get exchange
   * @return exchange
  **/
  @Schema(description = "")
  public Exchange getExchange() {
    return exchange;
  }

  public void setExchange(Exchange exchange) {
    this.exchange = exchange;
  }

  public CryptoCurrencyProfile lastPrice(Price lastPrice) {
    this.lastPrice = lastPrice;
    return this;
  }

   /**
   * Get lastPrice
   * @return lastPrice
  **/
  @Schema(description = "")
  public Price getLastPrice() {
    return lastPrice;
  }

  public void setLastPrice(Price lastPrice) {
    this.lastPrice = lastPrice;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CryptoCurrencyProfile cryptoCurrencyProfile = (CryptoCurrencyProfile) o;
    return Objects.equals(this.logo, cryptoCurrencyProfile.logo) &&
        Objects.equals(this.marketCap, cryptoCurrencyProfile.marketCap) &&
        Objects.equals(this.circulatingSupply, cryptoCurrencyProfile.circulatingSupply) &&
        Objects.equals(this.maxSupply, cryptoCurrencyProfile.maxSupply) &&
        Objects.equals(this.description, cryptoCurrencyProfile.description) &&
        Objects.equals(this.website, cryptoCurrencyProfile.website) &&
        Objects.equals(this.ticker, cryptoCurrencyProfile.ticker) &&
        Objects.equals(this.fullTicker, cryptoCurrencyProfile.fullTicker) &&
        Objects.equals(this.assetType, cryptoCurrencyProfile.assetType) &&
        Objects.equals(this.name, cryptoCurrencyProfile.name) &&
        Objects.equals(this.exchange, cryptoCurrencyProfile.exchange) &&
        Objects.equals(this.lastPrice, cryptoCurrencyProfile.lastPrice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logo, marketCap, circulatingSupply, maxSupply, description, website, ticker, fullTicker, assetType, name, exchange, lastPrice);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CryptoCurrencyProfile {\n");
    
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    marketCap: ").append(toIndentedString(marketCap)).append("\n");
    sb.append("    circulatingSupply: ").append(toIndentedString(circulatingSupply)).append("\n");
    sb.append("    maxSupply: ").append(toIndentedString(maxSupply)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("    ticker: ").append(toIndentedString(ticker)).append("\n");
    sb.append("    fullTicker: ").append(toIndentedString(fullTicker)).append("\n");
    sb.append("    assetType: ").append(toIndentedString(assetType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    exchange: ").append(toIndentedString(exchange)).append("\n");
    sb.append("    lastPrice: ").append(toIndentedString(lastPrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
